############### SITE CUSTOMIZATION ###############

# The APP_NAME is shown in the UI and web page title
APP_NAME=Laravel

# Provide the base URL (no trailing slash) to where you've deployed the app
APP_URL=https://events.example.org

# Provide a URL to a logo to use in the header bar
LOGO_URL=/public/example.svg
FAVICON_URL=/public/favicon.ico

# Whether or not to enable receiving webmention responses
ENABLE_WEBMENTION_RESPONSES=true

# Show or hide the ticket URL field
ENABLE_TICKET_URL=true

# Choose whether RSVP names appear in the ics event titles
# (Most useful for small team installs)
SHOW_RSVPS_IN_ICS=false



############### SERVER SETTINGS ###############

# Set to "false" and "production" for production deployment
APP_DEBUG=true
APP_ENV=local

# set via php artisan key:generate
APP_KEY=

# Set up the database configuration here
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=

# Redis is a good solution for these, but you should be able to use any option provided by Laravel too

# https://laravel.com/docs/6.x/cache
CACHE_DRIVER=redis
# CACHE_DRIVER=database

# https://laravel.com/docs/6.x/queues
QUEUE_CONNECTION=redis
# QUEUE_CONNECTION=database
# QUEUE_CONNECTION=sync

# https://laravel.com/docs/6.x/session
SESSION_DRIVER=redis
# SESSION_DRIVER=cookie
# SESSION_DRIVER=database

SESSION_LIFETIME=86400

# Configure redis for caching, queuing and sessions
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

# If you want to store images on S3 instead of the filesystem, configure the below
FILESYSTEM_DRIVER=s3
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=
AWS_BUCKET=
AWS_URL=

# For Heroku, use LOG_CHANNEL=stderr
LOG_CHANNEL=stack



################ AUTHENTICATION ################
# Choose how you want to handle user authentication

# Vouch https://github.com/vouch/vouch-proxy
AUTH_METHOD=vouch
VOUCH_HOSTNAME=sso.example.org

# GitHub
# AUTH_METHOD=github
# GITHUB_CLIENT_ID=
# GITHUB_CLIENT_SECRET=
# Optionally, define a space-separated list of users who are allowed to log in.
# If this list is not defined, then anyone with a GitHub account will be able to log in.
# GITHUB_ALLOWED_USERS=
# Make sure to register a callback URL on github such as:
# https://events.example.org/auth/github

# Choose whether to show a "log in/out" button in the top nav bar
AUTH_SHOW_LOGIN=true
AUTH_SHOW_LOGOUT=true

# Who should be able to manage events?
# Set to "users" so any logged-in user can create events
# Set to "admins" so that only admin users can create events
# Currently this permission applies to all actions on an event, including
# creating, editing, deleting events, and creating and deleting responses
ALLOW_MANAGE_EVENTS=users

# Who should be able to edit system messages?
# This includes things like the configurable text on the "add an event" page
# Set to "users" or "admins"
ALLOW_MANAGE_SITE=admins



############### API KEYS ###############

# https://developers.google.com/maps/documentation/javascript/get-api-key
GOOGLEMAPS_API_KEY=

# Provide a google analytics ID if you want GA tracking
GA_ID=

# Optionally, configure go imageproxy to serve resized images to offload that from this app.
# If you don't define these variables then image resizing will be handled by this app instead.
# https://github.com/willnorris/imageproxy
# This is the path on your web server that the imageproxy app is served from
# IMAGE_PROXY_BASE=/img/
# The secret signing key used when configuring imageproxy
# IMAGE_PROXY_KEY=

# Provide Twitter OAuth credentials to be able to add tweets to event pages
TWITTER_CONSUMER_KEY=
TWITTER_CONSUMER_SECRET=
TWITTER_ACCESS_TOKEN=
TWITTER_ACCESS_TOKEN_SECRET=

